library(datasets)
data(iris)
data(iris)
q()
q()
install.packages(c("boot", "class", "cluster", "codetools", "colorspace", "evaluate", "foreign", "formatR", "Formula", "ggplot2", "highr", "Hmisc", "jsonlite", "KernSmooth", "knitr", "lattice", "manipulate", "markdown", "MASS", "Matrix", "mgcv", "mime", "nlme", "nnet", "plyr", "Rcpp", "RCurl", "rmarkdown", "rpart", "spatial", "stringr", "survival"))
q()
library(knitr)
library(ggplot2)
lambda <- 0.2 # Set the value of lambda
n <- 40 # Number of measures needed for the averages
nOfSimul <- 1000 # Number of simulations
set.seed(10) # Declare set the seed for reproducibility
distExponential <- matrix(data = rexp(n * nOfSimul, lambda), nrow = nOfSimul)
meanDistExponential <- data.frame(means = apply(distExponential, 1, mean))
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1)))
mu <- 1/lambda
print(mu)
xBar <- mean(meanDistExponential$means)
print(xBar)
stdDev <- 1/lambda/sqrt(n)
print(stdDev)
var <- stdDev^2
print(var)
stdDevX <- sd(meanDistExponential$means)
print(stdDevX)
varX <- var(meanDistExponential$means)
print(varX)
qqnorm(meanDistExponential)
View(meanDistExponential)
View(meanDistExponential$means)
qqnorm(meanDistExponential$means)
qqline(meanDistExponential$means)
??qq
??qqnorm
*With this calculations and graphic I can say that the theoretical mean and the average sample mean are very close as expected.*
library(datasets)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
View(ToothGrowth)
View(ToothGrowth)
names(ToothFrowth)
names(ToothGrowth)
summary(ToothGrowth)
levels(ToothGrowth$supp)<-c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
library(datasets)
data(ToothGrowth)
class(ToothGrowth)
class(ToothGrowth$supp)
ToothGrowth$supp
View(ToothGrowth)
levels(ToothGrowth$supp)<-c("Orange Juice", "Ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
View(ToothGrowth)
library(datasets)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange Juice", "ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
Now that I'm familiar with data, its time to plot a graphic that help us to understand the experiment, the plot its designed to  know how the measure of teeth its related with the suplemment given to the animals (ascorbic acid or orange juice).
library(datasets)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange Juice", "ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
library(ggplot2)
a <- ggplot(ToothGrowth,aes(x=len,fill=supp))
a + geom_histogram(aes(y=..density..),colour="black",binwidth=4) +
labs(title="Guinea Pig Tooth Growth by Supplement")+
labs(x="Tooth Length (microns)",y="Percent of Guinea Pigs")
a + geom_histogram(aes(y=..density..)) +
library(ggplot2)
a <- ggplot(ToothGrowth,aes(x=len,fill=supp))
a + geom_histogram(aes(y=..density..)) +
labs(title="Guinea Pig Tooth Growth by Supplement")+
labs(x="Tooth Length (microns)",y="Percent of Guinea Pigs")
qt(.975,10-1)
a <- ggplot(ToothGrowth,aes(x=len,fill=supp))
a + geom_histogram(aes(y=..density..),colour="blue") +
labs(title="Guinea Pig Tooth Growth Relation by Supplement")+
labs(x="Tooth Length (microns)",y="% Guinea Pigs")
library(datasets)
library(ggplot2)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange Juice", "ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue") +
labs(title="Guinea Pig Tooth Growth Relation by Supplement")+
labs(x="Tooth Length (microns)",y="% Guinea Pigs")
library(reshape2); library(plyr)
ToothGrowth$lenGroup <- cut(ToothGrowth$len,quantile(ToothGrowth$len))
ToothGrowth$lenGroup[1]<-"(4.2,13.1]"
SixGroups <- data.frame(split(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose)))
molten <- melt(SixGroups)
g <- ggplot(molten, aes(variable,value))
g+geom_boxplot()+
labs(title="Guinea Pig Tooth Growth by Supplement & Dose")+
labs(x="Supplement & Dose (mg)",y="Tooth length (microns)")
ds <- ddply(molten,.(variable),summarise,mean=mean(value),sd=sd(value)) #data summary
ds
qt(.975,10-1)
?qt
qt(.975,10-1)
View(SixGroups)
library(datasets)
library(ggplot2)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange juice", "ascorbic Acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue") +
labs(title="Guinea Pig Tooth Growth Relation by Supplement")+
labs(x="Tooth Length (microns)",y="% Guinea Pigs")
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement")+
labs(x="Tooth Length (microns)",y="% Guinea Pigs")
library(reshape2); library(plyr)
ToothGrowth$lenGroup <- cut(ToothGrowth$len,quantile(ToothGrowth$len))
ToothGrowth$lenGroup[1]<-"(4.2,13.1]"
SixGroups <- data.frame(split(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose)))
molten <- melt(SixGroups)
View(SixGroups)
library(datasets)
library(ggplot2)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange juice", "ascorbic acid")
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth)
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement")+
labs(x="Tooth Length (microns)",y="% Guinea Pigs")
library(reshape2); library(plyr)
ToothGrowth$lenGroup <- cut(ToothGrowth$len,quantile(ToothGrowth$len))
ToothGrowth$lenGroup[1]<-"(4.2,13.1]"
SixGroups <- data.frame(split(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose)))
molten <- melt(SixGroups)
View(SixGroups)
g <- ggplot(molten, aes(variable,value))
g+geom_boxplot()+
labs(title="Guinea Pig Tooth Growth by Supplement & Dose")+
labs(x="Supplement & Dose (mg)",y="Tooth length (microns)")
ds <- ddply(molten,.(variable),summarise,mean=mean(value),sd=sd(value)) #data summary
ds
## Use t-student to reject if its larger
qt(0.975, (10-1))
## Reject Null, Orange Juice means bigger Tooth
t.test(SixGroups$orange.juice.0.5, SixGroups$ascorbic.acid.0.5)
##Reject the Null, Orange Juice means bigger Tooth
t.test(SixGroups$orange.juice.1, SixGroups$ascorbic.acid.1)
## Use t-student to reject if its larger
qt(0.975, (10-1))
## Reject Null, Orange Juice means bigger Tooth
t.test(SixGroups$orange.juice.0.5, SixGroups$ascorbic.acid.0.5)
##Reject the Null, Orange Juice means bigger Tooth
t.test(SixGroups$orange.juice.1, SixGroups$ascorbic.acid.1)
##Fail to reject the Null, Difference might be zero
t.test(SixGroups$orange.juice.2, SixGroups$ascorbic.acid.2)
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_colour_manual("Given Supplement", values = c("orange", "green"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="Given Supplement", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_colour_manual("Given Supplement", values = c("orange", "green"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_colour_manual("Given Supplement", values = c("orange", "green"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_gradient("Given Supplement", values = c("orange", "green"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_gradient("Given Supplement", high="green", low="orange"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_gradient("Given Supplement", high="green", low="orange")
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_manual("Given Supplement", values=c("green", "orange"))
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) +
labs(title="Guinea Pig Tooth Growth Relation by Supplement") +
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_manual("Given Supplement", values=c("orange", "green"))
# Load libraries
library(knitr)
library(ggplot2)
lambda <- 0.2 # Set the value of lambda
n <- 40 # Number of measures needed for the averages
nOfSimul <- 1000 # Number of simulations
set.seed(10) # Declare set the seed for reproducibility
distExponential <- matrix(data = rexp(n * nOfSimul, lambda), nrow = nOfSimul)
meanDistExponential <- data.frame(means = apply(distExponential, 1, mean))
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1)))+
scale_colour_gradient(low="yellow", high="red")
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1))) +
scale_colour_gradient(low="yellow", high="red")
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1)))
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1))) +
scale_colour_gradient(low="yellow")
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1))) +
scale_fill_continuous(low="yellow", high="red")
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1))) +
scale_fill_continuous(low="blue", high="red")
ggplot(data = meanDistExponential, aes(x = means), color="red") +
geom_histogram(binwidth = 0.1, aes(fill = ..count..)) +
labs(title = "Exponential distribution of averages of 40 exponentials\non a thousand simulations",
x="Means", y="Count") +
scale_x_continuous(breaks = round(seq(min(meanDistExponential$means), max(meanDistExponential$means), by=1))) +
scale_fill_continuous(low="blue", high="yellow")
library(datasets)  ##Load needed libraries
library(ggplot2)
library(reshape2)
library(plyr)
data(ToothGrowth)
levels(ToothGrowth$supp)<-c("orange juice", "ascorbic acid") ## Change codes for more readable data
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
summary(ToothGrowth) ## Print summary
g <- ggplot(ToothGrowth,aes(x=len,fill=supp))
g + geom_histogram(aes(y=..density..),colour="blue", binwidth=2) + ## Plot distribution, green for
labs(title="Guinea Pig Tooth Growth Relation by Supplement") + ## ascorbic, orange for juice
labs(x="Tooth Length (microns)",y="% Guinea Pigs") +
scale_fill_manual("Given Supplement", values=c("orange", "green"))
ToothGrowth$qRank <- cut(ToothGrowth$len,quantile(ToothGrowth$len)) ##cut data by quantile
ToothGrowth$qRank[1]<-"(4.2,13.1]" ## Assign quantile to NA value to first column
##Group data by Supplement & Dose, then create a new data frame
rankedTable <- data.frame(split(ToothGrowth$len,list(ToothGrowth$supp,ToothGrowth$dose)))
newToothGrowth <- melt(rankedTable) ##Create new set only with Grouped Supplement & Dose
View(newToothGrowth)
newTootGrowth$variable<-gsub(x=newToothGrowth$variable, pattern="\\.", replacement=" ")
newToothGrowth$variable<-gsub(x=newToothGrowth$variable, pattern="\\.", replacement=" ")
View(ToothGrowth)
View(newToothGrowth)
swirl()
library(swirl)
swirl()
0
quit
exit
quit
1100 + c(-1,1) * qt(0.975, 8) * 30/sqrt(9)
-2 + c(-1,1) * qt(.975, 8) * 2.6/3
-2 + c(-1,1) * qt(.975, 8) * 2.6/3
n <- 9
m <- -2
#-2 + c(1)qt(0.975,n-1)*s/sqrt(n)=0
#qt(0.975,8)*s/sqrt(9) = 2
s <- 2*sqrt(9)/qt(0.975,8)
n1 <- n2 <- 10
m1 <- 3; v1 <- 0.6
m2 <- 5; v2 <- 0.68
sp <- sqrt(((n1-1)*v1+(n2-1)*v2)/(n1 + n2 - 2))
(m1-m2)+c(-1,1)*qt(0.975,n1+n2-2)*sp*sqrt(1/n1+1/n2)
n1=100
m1=6
sd1=2
n2=100
m2=4
sd2=0.5
sp<- sqrt(   ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2)   )
ci<-(m1-m2) + c(-1,1)*qt(p=.975, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
ci
n1=9 #treated
m1=-3
sd1=1.5
n2=9 #placebo
m2=1
sd2=1.8
sp<- sqrt(   ( (n1-1)*sd1^2+(n2-1)*sd2^2 ) / (n1+n2-2)   )
ci<-(m1-m2) + c(-1,1)*qt(p=.90+(1-.90)/2, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
ci
n1=9 #treated
m1=-3
sd1=1.5
n2=9 #placebo
m2=1
sd2=1.8
sp<- sqrt(((n1-1)*sd1^2+(n2-1)*sd2^2)/(n1+n2-2))
ci<-(m1-m2) + c(-1,1)*qt(p=.90+(1-.90)/2, df=(n1+n2-2))*sp*sqrt(1/n1 + 1/n2)
ci
library(ggplot2)
x <- seq(-8,8, length = 2000)
dat <- data.frame(x=x, y=dnorm(x,sd=2))
g <- ggplot(dat, aes(x = x, y = y)) + geom_line(size = 1.5)+scale_y_continuous(limits=c(0,max(dat$y)))
g <- g + layer("area", mapping = aes( x=ifelse(x>qnorm(.95,sd=2),x,NA)), geom_params=list(fill="red",alpha=.5))
print(g)
library(swirl)
swirl()
1
2
0.8
15
qt(.95,15)
dim(fs)
t.test(fs$sheight-fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
8
quit()
library("UsingR")
install_from_swirl
library(swirl)
install_from_swirl()
install_from_swirl("Regression Models")
quit
exit
q
q()
install.packages("rcharts")
install.packages("rcharts")
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
library('shinyapps')
devtools::install_github('rstudio/shinyapps')
install.packages("RCurl")
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
devtools::install_github('ropensci/plotly')
library(devtools)
install_github('slidify', 'ramnathv')
install.packages("httr")
install_github('slidify', 'ramnathv')
install.packages("stringi")
install_github('slidify', 'ramnathv')
install_github('rCharts', 'ramnathv')
source('~/Data Science/Regression Models/Quiz/Quiz1.R')
cname<-file.path("~", "Data Science", "10 Data Science Capstone", "Dataset", "en_US")
con <- file(paste(cname,"/en_US.blogs.txt",sep=""), open = "rb")
blogs <- readLines(con, encoding="latin1")
setwd("~/Data Science/10 Data Science Capstone/Capstone/Milestone Report")
slidify::publish_rpubs("Text Processing Basics","MilestoneReport.html")
slidify::publish_rpubs("Text Processing Basics","MilestoneReport.html")

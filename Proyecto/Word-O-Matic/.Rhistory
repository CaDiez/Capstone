##' @title Dicount Factor Computation for Back Off model
##' @param DT , result of function CondtionalProbNgram
##' @return a data.table with the discount factor compute as 1 - \sum_{w_2} \alpha(w_2, w_1)
##' @author david
ComputeDiscountFactor <- function(DT){
res <- DT[, list(disc.f= 1 - sum(cond.prop)), by = key.w]
setnames(res, 'key.w', 's')
setkey(res, s)
return(res)
}
GenerateAdjustedProbTables <- function(txt.clean){
unigram <- CreateNGramTable(txt.clean, 1L)
v.size <- nrow(unigram)
print('End of unigram')
gc()
trigram <- CreateNGramTable(txt.clean, 3L, v.size)
print('End of trigram computation.')
bigram <- CreateNGramTable(txt.clean, 2L, v.size)
print('End of bigram computation.')
bprob <- ConditionalProbNgram(bigram, unigram, 2)
setkey(bprob, 'key.w')
gc()
tprob <- ConditionalProbNgram(trigram, bigram, 3)
setkey(tprob, 'key.w')
print('End of conditional probability computation')
prob.adj <- lapply(list(n2=bprob, n3=tprob),
function(DT) {
res <- DT[(DT[c('', ' '), -.I])]
res <- res[!grep('\\d', res$s),]
res[, adj.count:=NULL]
setkey(res, 'key.w')
})
gc()
return(prob.adj)
}
prob.adj <- GenerateAdjustedProbTables(txt.clean)
gc
gc()
gc()
library('tm')
library('parallel')
options('mc.cores' =  4)
src.dir <- '~/Data Science/10 Data Science Capstone/Dataset/en_US'  # testing purpose
src <- DirSource(src.dir)
sampleDS <- Corpus(src, readerControl = list(reader = readPlain, language= "en",
load = TRUE)) # A collection of 4 text
length(sampleDS)
RemovePunctuation <- function(plainTxtDoc){
s <- plainTxtDoc$content
s <- gsub("(\\w)-(\\w)", "\\1\1dd\\2", s)
s <- gsub("(\\w)'(\\w)", "\\1\2dd\\2", s)
s <- gsub("[[:punct:]]+", "", s)
s <- gsub("\1dd", "-", s, fixed = TRUE)
s <- gsub("\2dd", "'", s, fixed = TRUE)
plainTxtDoc$content <- s
return(plainTxtDoc)
}
CleanText <- function(corp.txt){
transformations <- getTransformations()
for (f in transformations){
if (f == 'removeWords'){
bw <- scan('bad_words.txt', character(), sep = '\n')
corps.txt <- tm_map(corp.txt, get(f), bw)
next
}
if (f == 'removePunctuation'){
corp.txt <- tm_map(corp.txt, function(txt) RemovePunctuation(txt))
next
}
if (f == 'stemDocument') next
corps.txt <- tm_map(corp.txt, get(f))
}
return(corp.txt)
}
SampleDS <- CleanText(sampleDS)
#save(SampleDS, file='final/en_US/en_US_corpus_clean.RData')
save(SampleDS, file='~/Data Science/10 Data Science Capstone/Capstone/Proyecto/Otro/en_US_corpus_clean2.RData')
CleanText <- function(corp.txt){
transformations <- getTransformations()
for (f in transformations){
if (f == 'removeWords'){
bw <- scan('~/Data Science/10 Data Science Capstone/Dataset/badWords.txt', character(), sep = '\n')
corps.txt <- tm_map(corp.txt, get(f), bw)
next
}
if (f == 'removePunctuation'){
corp.txt <- tm_map(corp.txt, function(txt) RemovePunctuation(txt))
next
}
if (f == 'stemDocument') next
corps.txt <- tm_map(corp.txt, get(f))
}
return(corp.txt)
}
SampleDS <- CleanText(sampleDS)
save(SampleDS, file='~/Data Science/10 Data Science Capstone/Capstone/Proyecto/Otro/cleanCorpus2.RData')
# setwd('./Dropbox/coursera_capstone_project')
library('tau')
library('tm')
library('Matrix')
library("RWeka")
library('ggplot2')
library('data.table')
library('reshape2')
library('parallel')
options('mc.cores' =  4)
#load('final/en_US/en_US_corpus_clean.RData') # load sampleDS as a corpus
load('~/Data Science/10 Data Science Capstone/Capstone/Proyecto/Otro/cleanCorpus2.RData') # load sampleDS as a corpus
# load('final/en_US_short/en_US_corpus_clean_short.RData') # load sampleDS as a corpus
##' Count n-gram by skipping one word
##'
##' Function to take any text taking lower case and counting the number
##' of sequence of words in the text by skpping one word a the time
##' @title Count skipped ngram
##' @param s, character vector
##' @param n the n-gram to consider
##' @return
##' @author David
CountNgramSkip <- function(s, n=3, skip=1){
cl <- makeCluster(4)
clusterEvalQ(cl, {
library('data.table')
library('parallel')
})
env <- new.env()
assign('n',  n, env)
assign('skip',  skip, env)
clusterExport(cl, c('n', 'skip'), envir=env)
res <- unlist(parLapply(cl, s, function(txt){
txt <- tolower(txt)
t.l <- strsplit(txt, ' ')[[1]]
if (length(t.l) < 5) {return(data.table())}
res <- vapply(1:(length(t.l)-(2*n-1)), function(idx){
paste(t.l[idx+((skip+1)*(1:n)-(skip+1))], collapse=' ')
}, character(1))
return(res)
}))
stopCluster(cl)
print('End of cluster')
print(paste('n:', n, 'skip:', skip))
res <- data.table(s=res)
res.DT <- res[, .N, by='s'][order(-N)][N > 1]
setnames(res.DT, 'N', 'count')
return(res.DT)
}
FindNgram <- function(x, n=3){
content <- iconv(x$content, "utf-8", "ASCII", sub="")
print('Compute n-gram')
res.ngram <- CountNgramSkip(content, n, 0)
if (n==1) return(res.ngram)
print('Compute skip n-gram')
res.ngram.skip <- CountNgramSkip(content, n, 1)
res.ngram.all <- rbind(res.ngram, res.ngram.skip)
return(res.ngram.all)
}
### A Lot of the small word are used really often
CreateNGramTable <- function(corp, n, v.size=0){
res.l <- lapply(corp, FindNgram, n=n)
res.dt <- rbindlist(res.l)[, list(count=sum(count)), by=s]
res.dt <- res.dt[res.dt$count>2]
res.dt <- CleanNGram(res.dt)
res.dt <- res.dt[, list(count=sum(count)), by=s]
if(n>1 & v.size > 0){
res.adj.count <- GoodTuringSmoothing(FreqNGramVector(res.dt, n, v.size),
v.size) # Compute the smoothing count
setkey(res.dt, count) # Join the two datasets
setkey(res.adj.count, count)
res.dt <- res.adj.count[J(res.dt)]
}
setkey(res.dt, s)
return(res.dt)
}
CleanNGram <- function(n.gram.table){
ngt <- n.gram.table
ngt <- ngt[!grepl('- ', ngt[, s]),]
ngt[, 's':= gsub('^-','', s)]
return(ngt)
}
### Function to compute the "frequency of frequencies vector"
# http://en.wikipedia.org/wiki/Good%E2%80%93Turing_frequency_estimation
FreqNGramVector <- function(n.gram.table, n=1, v.size=9e5){
res <- n.gram.table[, list(inv.freq=.N), by=count][order(count)]
res <- rbind(data.table(count=0, inv.freq=v.size^2-sum(res$inv.freq)), res)
return(res)
}
##' Implements a heuristic version of the Good-Turing Smoothing
##'
##' When there are no n-gram with r+1, one uses the the alpha smoothing version
##' @title Good-Turing Smoothing for adjusted count of n-grams
##' @param DT, result of the function FreqNGramVector
##' @param v.size, vocabulary size (number of row of the unigrams)
##' @param alpha smoothing parameter, default 0.00017
##' @return a data.table with column count, inv.freq and adj.count
##' @author david
GoodTuringSmoothing <- function(DT, v.size, alpha = 0.00017, ngram=3){
n <- DT[, sum(inv.freq)]
DT[, adj.count:=0.0]
DT[1, adj.count:=inv.freq/n]
for (i in seq_along(DT$count)[-1]){
if(DT[c(i-1, i), diff(count)!=1]) {
DT[i, adj.count:=(count+alpha)*n/(n+alpha*v.size^ngram)] # alpha adjustement
} else {
DT[i, adj.count:=(DT[i, count])*(DT[i, inv.freq]/DT[i-1, inv.freq])]
}
}
return(DT)
}
##' Compute the Conditional probability of trigram
##'
##' Use 3- and 2-grams to compute the conditional probability of a sentence
##' @title Conditional Probability of Trigram computations
##' @param nb a data.table with the with column "s" and "count" where s is a three words strings (nb = ngram big) (usually the trigram)
##' @param ns  idem as trig but for bigrams ("s" contains two words sentence) n(gram-small) , usually the bigram
##' @param n, the dimension of the n-gram of in nb
##' @return a data.table with the conditional probability for each trigrams
##' @author david
ConditionalProbNgram <- function(nb, ns, n){
if (n == 1){
res <-  nb[, list(s=s, count=count, adj.count=count,
cond.prob=count/sum(count))]
return(res)
}
setkey(ns, s)
nb[, key.b:= vapply(strsplit(nb$s, ' '), function(x){
paste0(x[-length(x)], collapse=' ')
}, character(1))]
setkey(nb, key.b)
### Join and do the division on the adjusted count
res <- ns[J(nb)][,list(key.w=s, s=i.s, adj.count=adj.count,
cond.prop=i.count/count)]
setkey(res, s)
return(res)
}
##' Discount Factor computation
##'
##' Use d as the sum of 1 - \sum_{w_2} \alpha (w_2, w_1)
##' @title Dicount Factor Computation for Back Off model
##' @param DT , result of function CondtionalProbNgram
##' @return a data.table with the discount factor compute as 1 - \sum_{w_2} \alpha(w_2, w_1)
##' @author david
ComputeDiscountFactor <- function(DT){
res <- DT[, list(disc.f= 1 - sum(cond.prop)), by = key.w]
setnames(res, 'key.w', 's')
setkey(res, s)
return(res)
}
GenerateAdjustedProbTables <- function(sampleDS){
unigram <- CreateNGramTable(sampleDS, 1L)
v.size <- nrow(unigram)
print('End of unigram')
gc()
trigram <- CreateNGramTable(sampleDS, 3L, v.size)
print('End of trigram computation.')
bigram <- CreateNGramTable(sampleDS, 2L, v.size)
print('End of bigram computation.')
bprob <- ConditionalProbNgram(bigram, unigram, 2)
setkey(bprob, 'key.w')
gc()
tprob <- ConditionalProbNgram(trigram, bigram, 3)
setkey(tprob, 'key.w')
print('End of conditional probability computation')
prob.adj <- lapply(list(n2=bprob, n3=tprob),
function(DT) {
res <- DT[(DT[c('', ' '), -.I])]
res <- res[!grep('\\d', res$s),]
res[, adj.count:=NULL]
setkey(res, 'key.w')
})
gc()
return(prob.adj)
}
gc()
prob.adj <- GenerateAdjustedProbTables(sampleDS)
print('I finished to compute the probabilities. Now saving them.')
# save(prob.adj, file='prob.adj.Rdata')
save(prob.adj, file='~/Data Science/10 Data Science Capstone/Dataset/prob.ngmrams.Rdata')
prob.adj <- GenerateAdjustedProbTables(SampleDS)
print('I finished to compute the probabilities. Now saving them.')
# save(prob.adj, file='prob.adj.Rdata')
save(prob.adj, file='~/Data Science/10 Data Science Capstone/Dataset/prob.ngmrams.Rdata')
source('~/Data Science/10 Data Science Capstone/Capstone/Proyecto/Otro/3b Modelling.R')
ptm <- proc.time()
proc.time() - ptm
sys_time <<- (ptm["sys.self"])
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
my_data<-PredictNextWord(input_str, prob.adj)
my_data<-PredictNextWord("Hello my name is ", prob.adj)
merged <- my_data
new_word=merged[a, Word]
View(merged)
new_word=merged[a, predict.word]
new_word=merged[a, ]
new_word=merged[1, ]
View(new_word)
new_word=merged[1, predict.word]
new_word=merged[1, ]
new_word
new_word=merged[1, 1]
new_word=merged[1][predict.word]
new_word=merged[1][predicted.word]
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
View(merged)
merged_full[,1]
merged[,1]
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
xtable(merged)
merged<-dvalues()
merged <- as.matrix(my_data)
merged_full <<- as.matrix(my_data)
out_words <- vector("list")
wordcloud(merged_full[,1], merged_full[,2],
min.freq = 0.001, max.words=50,
colors=brewer.pal(8, "Dark2"))
merged_full
merged_full[, predict.word]
merged_full[1,2]
merged_full[1,]
merged_full[,1]
merged_full[,2]
wordcloud(merged_full[,1], merged_full[,2],
min.freq = 0.001, max.words=50,
colors=brewer.pal(8, "Dark2"))
merged <- as.list(my_data)
merged_full <<- as.list(my_data)
wordcloud(merged_full[,1], merged_full[,2],
min.freq = 0.001, max.words=50,
colors=brewer.pal(8, "Dark2"))
merged[,1]
merged
merged[,predict.word]
class(my_data)
merged <- my_data
merged_full <<- my_data
wordcloud(merged_full[,1], merged_full[,2],
min.freq = 0.001, max.words=50,
colors=brewer.pal(8, "Dark2"))
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
x<-list(merged, merged_full)
x
x[[1]]
x[[1]]$predict.word
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
merged[a, 1]
merged[a, 1]$predict.word
merged_full[a, 1]
merged_full[[2]]
merged_full[[1]]
merged_full <<- my_data[[2]]
merged_full[[2]]
merged_full[[1]]
merged_full
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
View(merged)
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
as.character(i)
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
out_words
View(merged)
substr(e, 7,1)
substr(e, 7,8)
substr(e, 7,7)
substr(e, 8,8)
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
substr(as.numeric(e,8,8))
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
x<-gsub("[^0-9]","",e,"")
x<-gsub("[^0-9]","",e,"")
gsub("[^0-9]","",e,"")
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
View(merged)
View(merged)
merged[a,1]
merged[13,1]
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
install.packages("DT")
library(DT)
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
View(x)
proc.time()
?proc.time
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
?sys.self
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
proc.time
proc.time()
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
ptm
ptm["elapsed"]
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
Sys.time()
proc.time()
proc.time()
print ("hola")
proc.time()-ptm
proc.time()
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
sysTime
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic/New')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
devtools::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
library(devtools)
library(shinyapps)
devtools::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
shinyapps::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
shinyapps::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
install.packages(c("BH", "boot", "chron", "class", "cluster", "codetools", "crayon", "curl", "data.table", "digest", "dplyr", "evaluate", "foreign", "formatR", "ggplot2", "git2r", "gridExtra", "gtable", "HistData", "Hmisc", "htmlwidgets", "httr", "KernSmooth", "knitr", "lattice", "latticeExtra", "manipulate", "MASS", "Matrix", "memoise", "mgcv", "munsell", "nlme", "nnet", "packrat", "R.methodsS3", "R.oo", "R.utils", "R6", "Rcpp", "RCurl", "rmarkdown", "roxygen2", "rpart", "rstudioapi", "rversions", "RWeka", "scales", "spatial", "survival", "swirl", "testthat", "tidyr", "UsingR", "viridis", "XML", "xml2"))
rsconnect::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
library(shiny)
rsconnect::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
library(rsconnect)
install.packages("rsconnect")
rsconnect::setAccountInfo(name='cadiez', token='C67F4C337C493A86719923B8655452ED', secret='DWoS0BBC5zTZJVggo4IfmXxGQ0siRs/f29FtS4G4')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
shiny::runApp('Data Science/10 Data Science Capstone/Capstone/Proyecto/Word-O-Matic')
